function Invoke-AesDecrypt_####UUID#### {
    param(
        [Parameter(Mandatory=$true)]
        [byte[]]$Data
    )

    Write-Host "[+] Decrypting from Custom AES"
    
    # Explicitly define as byte arrays
    [byte[]]$Key = ####KEY####
    [byte[]]$IV = ####IV####

    # S-Box and Inverse S-Box tables (explicitly cast as byte arrays)
    [byte[]]$SBox = @(
        0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
        0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
        0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
        0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
        0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
        0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
        0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
        0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
        0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
        0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
        0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
        0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
        0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
        0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
        0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
        0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
    )

    [byte[]]$InvSBox = @(
        0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb,
        0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb,
        0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e,
        0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25,
        0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92,
        0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84,
        0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06,
        0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b,
        0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73,
        0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e,
        0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b,
        0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4,
        0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f,
        0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef,
        0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61,
        0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d
    )

    # Modified array handling in functions
    function GMul {
        param(
            [byte]$a,
            [byte]$b
        )
        [byte]$p = 0
        for($i = 0; $i -lt 8; $i++) {
            if(($b -band 1) -ne 0) { $p = [byte]($p -bxor $a) }
            $highBit = $a -band 0x80
            $a = [byte](($a -shl 1) -band 0xFF)
            if($highBit -ne 0) { $a = [byte]($a -bxor 0x1b) }
            $b = [byte]($b -shr 1)
        }
        return $p
    }

    function AddRoundKey {
        param([byte[,]]$state, [byte[]]$roundKey, [int]$round)
        for($i = 0; $i -lt 4; $i++) {
            for($j = 0; $j -lt 4; $j++) {
                $state[$j,$i] = [byte]($state[$j,$i] -bxor $roundKey[$round * 16 + $i * 4 + $j])
            }
        }
    }

    function InvShiftRows {
        param([byte[,]]$state)
        # Row 1
        $temp = $state[1,3]
        $state[1,3] = $state[1,2]
        $state[1,2] = $state[1,1]
        $state[1,1] = $state[1,0]
        $state[1,0] = $temp

        # Row 2
        $temp = $state[2,3]
        $state[2,3] = $state[2,1]
        $state[2,1] = $temp
        $temp = $state[2,2]
        $state[2,2] = $state[2,0]
        $state[2,0] = $temp

        # Row 3
        $temp = $state[3,0]
        $state[3,0] = $state[3,1]
        $state[3,1] = $state[3,2]
        $state[3,2] = $state[3,3]
        $state[3,3] = $temp
    }

    function InvSubBytes {
        param([byte[,]]$state)
        for($row = 0; $row -lt 4; $row++) {
            for($col = 0; $col -lt 4; $col++) {
                $state[$row,$col] = $InvSBox[$state[$row,$col]]
            }
        }
    }

    function InvMixColumns {
        param([byte[,]]$state)
        for($col = 0; $col -lt 4; $col++) {
            $s0 = $state[0,$col]
            $s1 = $state[1,$col]
            $s2 = $state[2,$col]
            $s3 = $state[3,$col]

            $state[0,$col] = (GMul 0x0e $s0) -bxor (GMul 0x0b $s1) -bxor (GMul 0x0d $s2) -bxor (GMul 0x09 $s3)
            $state[1,$col] = (GMul 0x09 $s0) -bxor (GMul 0x0e $s1) -bxor (GMul 0x0b $s2) -bxor (GMul 0x0d $s3)
            $state[2,$col] = (GMul 0x0d $s0) -bxor (GMul 0x09 $s1) -bxor (GMul 0x0e $s2) -bxor (GMul 0x0b $s3)
            $state[3,$col] = (GMul 0x0b $s0) -bxor (GMul 0x0d $s1) -bxor (GMul 0x09 $s2) -bxor (GMul 0x0e $s3)
        }
    }

    # Key expansion with explicit byte array
    [byte[]]$expandedKey = New-Object byte[] 176
    for($i = 0; $i -lt 16; $i++) {
        $expandedKey[$i] = $Key[$i]
    }
    
    [byte]$rcon = 1
    for($i = 16; $i -lt 176; $i += 4) {
        [byte[]]$temp = New-Object byte[] 4
        for($j = 0; $j -lt 4; $j++) {
            $temp[$j] = $expandedKey[$i - 4 + $j]
        }

        if($i % 16 -eq 0) {
            # Rotate word
            [byte]$t = $temp[0]
            $temp[0] = $temp[1]
            $temp[1] = $temp[2]
            $temp[2] = $temp[3]
            $temp[3] = $t

            # SubBytes
            for($j = 0; $j -lt 4; $j++) {
                $temp[$j] = $SBox[$temp[$j]]
            }

            # XOR with Rcon
            $temp[0] = [byte]($temp[0] -bxor $rcon)
            $rcon = (GMul $rcon 0x02)
        }

        for($j = 0; $j -lt 4; $j++) {
            $expandedKey[$i + $j] = [byte]($expandedKey[$i - 16 + $j] -bxor $temp[$j])
        }
    }

    # Process blocks
    [byte[]]$result = New-Object byte[] $Data.Length
    $Data.CopyTo($result, 0)
    [byte[]]$prevBlock = New-Object byte[] 16
    $IV.CopyTo($prevBlock, 0)
    
    for($i = 0; $i -lt $Data.Length; $i += 16) {
        $currentBlock = New-Object byte[] 16
        [Array]::Copy($Data, $i, $currentBlock, 0, 16)
        
        $state = New-Object 'byte[,]' 4,4
        for($row = 0; $row -lt 4; $row++) {
            for($col = 0; $col -lt 4; $col++) {
                $state[$row,$col] = $currentBlock[$col * 4 + $row]
            }
        }

        # Initial round
        AddRoundKey $state $expandedKey 10

        # Main rounds
        for($round = 9; $round -ge 1; $round--) {
            InvShiftRows $state
            InvSubBytes $state
            AddRoundKey $state $expandedKey $round
            InvMixColumns $state
        }

        # Final round
        InvShiftRows $state
        InvSubBytes $state
        AddRoundKey $state $expandedKey 0

        # Convert back and XOR with previous block (CBC mode)
        for($row = 0; $row -lt 4; $row++) {
            for($col = 0; $col -lt 4; $col++) {
                $result[$i + $col * 4 + $row] = [byte]($state[$row,$col] -bxor $prevBlock[$col * 4 + $row])
            }
        }

        # Save current block for next iteration
        [Array]::Copy($currentBlock, $prevBlock, 16)
    }

    # Remove PKCS7 padding
    $padding = $result[$result.Length - 1]
    if($padding -gt 0 -and $padding -le 16) {
        return $result[0..($result.Length - $padding - 1)]
    }
    
    return $result
}
