function Invoke-AesDecrypt_####UUID#### {
    param(
        [Parameter(Mandatory=$true)]
        [byte[]]$Data
    )

    Write-Host "[-] Decrypting from AES"
    $DecryptionKey = "####KEY####"
    $Salt = [System.Text.Encoding]::UTF8.GetBytes("####SALT####")

    # Create AES object
    $aes = [System.Security.Cryptography.Aes]::Create()
    
    # Generate key and IV using PBKDF2 (same as C# implementation)
    $pdb = New-Object System.Security.Cryptography.Rfc2898DeriveBytes $DecryptionKey, $Salt
    $aes.Key = $pdb.GetBytes(32)  # 256 bits
    $aes.IV = $pdb.GetBytes(16)   # 128 bits
    $aes.Padding = [System.Security.Cryptography.PaddingMode]::None

    # Create decryptor transform
    $decryptor = $aes.CreateDecryptor()
    
    # Create streams for decryption
    $ms = New-Object System.IO.MemoryStream
    $cs = New-Object System.Security.Cryptography.CryptoStream $ms, $decryptor, "Write"
    
    try {
        # Decrypt
        $cs.Write($Data, 0, $Data.Length)
        $cs.FlushFinalBlock()
        return $ms.ToArray()
    }
    finally {
        if ($cs) { $cs.Dispose() }
        if ($ms) { $ms.Dispose() }
        if ($aes) { $aes.Dispose() }
    }
}