[COMPILERS]
vcvarsall =
clx86_compiler =
clx64_compiler =
masmx86_compiler =
masmx64_compiler =
cscx86_compiler = C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe
cscx64_compiler = C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe
clangx86_compiler =
clangx64_compiler =
llvmx86_compiler =
llvmx64_compiler =
msbuildx86_compiler =
msbuildx64_compiler =
libx64_compiler =
libx86_compiler =

[SIGNERS]
signtool_x86 =
signtool_x64 =

[FOLDERS]
templates = core/templates
methods = ${TEMPLATES}/methods
encryptors = ${TEMPLATES}/encryptors
evasion = ${TEMPLATES}/evasions
loader_template = ${TEMPLATES}/loaderTemplate
headers = ${TEMPLATES}/headers

[FILES]
loader_template = core/templates/loaderTemplate
cpp_template_file = ${loader_template}/template.cpp
cs_template_file = ${loader_template}/template.cs
pwsh_template_file = ${loader_template}/template.ps1
vba_template_file = ${loader_template}/template.vba

[PLACEHOLDERS]
shellcode = ####SHELLCODE####
shellcode32 = ####SHELLCODE32####
shellcode_len = ####SHELLCODE_LEN####
shellcode32_len = ####SHELLCODE32_LEN####
code = //####CODE####
call = //####CALL####
include = //####INCLUDE####
define = //####DEFINE####
syscall = //####SYSCALL####
evasion = //####EVASION####
process = //####PROCESS####
unhook = //####UNHOOK####
args = //####ARGS####
delay = //####DELAY####
find_process = //####FIND_PROCESS####
shellcode_variable = encoded

; the compiler_argument should not define .DLL compilation options (e.g /target:library)
; It's already defined using the output_format parameters

[DEBUG]
encoders = False
shellcode = False
compiler = True
evasion = False
syscalls = False

[windows_cpp:DSys_CurrentThread]
expected_format = RAW_BIN
output_format = .exe


[windows_cpp:exec]
expected_format = RAW_BIN
output_format = .exe

[windows_cs:HalosGate]
expected_format = RAW_BIN
output_format = .exe

[windows_cs:Venoma]
expected_format = RAW_BIN
output_format = .exe

[windows_cs:DinvokeHollow]
expected_format = RAW_BIN
output_format = .exe

[windows_cs:InstallUtil.dll]
expected_format = RAW_BIN
output_format = .dll
compiler_args = -r:System.Configuration.Install
custom_output = Run it using InstallUtil (AppLocker Bypass): "C:\Windows\Microsoft.NET\Framework64\v4.0.30319\InstallUtil.exe /logfile= /LogToConsole=false evil-sc.dll"

[windows_cs:InstallUtilHollow]
expected_format = RAW_BIN
output_format = .exe
compiler_args = -r:System.Configuration.Install
custom_output = You may run this payload normaly: "evil-sc.exe" \nOr using installUtil to bypass AppLocker: "C:\Windows\Microsoft.NET\Framework64\v4.0.30319\InstallUtil.exe /logfile= /LogToConsole=false evil-sc.exe"

[windows_cs:InstallUtilPwsh]
expected_format = RAW_BIN
output_format = .exe
compiler_args = -r:System.Configuration.Install -r:core/templates/headers/System.Management.Automation.dll
custom_output = Run it using InstallUtil (AppLocker Bypass): "C:\Windows\Microsoft.NET\Framework64\v4.0.30319\InstallUtil.exe /logfile= /LogToConsole=false evil-sc.exe"

[windows_cs:NtMapViewOfSection]
expected_format = RAW_BIN
output_format = .exe

[windows_js:VenomaToJs]
expected_format = RAW_BIN
output_format = .js

[windows_pwsh:DelegateType]
expected_format = RAW_BIN
output_format = .ps1

[windows_pwsh:exec]
expected_format = RAW_BIN
output_format = .ps1

[windows_pwsh:PowerHollow]
expected_format = RAW_BIN
output_format = .ps1

[windows_pwsh:PowerInject]
expected_format = RAW_BIN
output_format = .ps1

[windows_pwsh:reflection]
expected_format = DOTNET_BIN,DOTNET_DLL
output_format = .ps1

[windows_vba:Inject]
expected_format = RAW_BIN
output_format = .vba

[windows_vba:Runner]
expected_format = RAW_BIN
output_format = .vba

[linux:SimpleExec]
expected_format = RAW_BIN
output_format = .elf
compiler_args = -z execstack -fno-stack-protector


[linux:LD_LIBRARY_PATH.so]
expected_format = RAW_BIN
output_format = .so
compiler_args = -z execstack

[linux:LD_PRELOAD.so]
expected_format = RAW_BIN
output_format = .so
compiler_args = -z execstack -Wall